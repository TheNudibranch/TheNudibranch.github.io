{
  "hash": "71c885787f7adaf753120c4effff33c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Polychoric Correltion with Likert Data\"\ndate: \"2023-01-01\"\ndescription: \"Polychoric correlation using a bayesian framework in Stan.\"\ncategories: [Bayes, R, Stan]\ntoc: true\nfreeze: true\n---\n\n\n\n## Motivation: It's likely likert\nLook at you, you successful businessperson you! You own a company that sells two products: A and B. You run a short two question survey to determine whether your customers would recommend either products. For this example we'll assume that all customers are using both products. The question style is the commonly used \"Net Promoter Score\" or likert scale format: \n\n<div style='text-align:center'>\n\"**Provide your level of agreement to the following question:** I would recommend this product to a friend\"\\n\\n\n</div>\n\nWhere the available choices are:\n\n1. Strongly Disagree\n2. Somewhat Disagree\n3. Neither Agree or Disagree\n4. Somewhat Agree\n5. Strongly Agree\n\nThere are of course limitations to this kind of survey design. For one, most people have a hard time discretizing their feelings or emotions into a single bucket. Perhaps the more appropriate question response would feature a slider that allows respondents to freely select their agreement on a continuous scale. Regardless, as this is the design chosen by thousands of companies and organizations, we'll choose it as well. Though, we'll recognize that agreement or sentiment in general is better categorized as a spectrum.\n\nEnough philosophy, now to the actual data. I'm going to show how the data is generated further down, but for now let's say that we ran the survey and collected 1,000 responses. First, let's start by loading in all the packages we'll need for this analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(cmdstanr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(ggridges)\n\noptions(mc.cores=4)\n\nset.seed(1234)\n\nsigma <- c(1,0.5,0.5,1) %>% matrix(.,nrow=2,byrow=T)\ndat <- mvtnorm::rmvnorm(500, sigma=sigma)\n\nc_points <- list(\n  c(-2.69, -0.68, 0.07, 1.13),\n  c(-1.29, 0.62, 1.38, 1.65)\n)\n\ndiscrete_data <- dat %>% apply(., 1, \n                               \\(x) c(\n                                 sum(x[1] > c_points[[1]]) + 1,\n                                 sum(x[2] > c_points[[2]]) + 1)\n                               ) %>% t()\n```\n:::\n\n\n\nNext, we'll take our `discrete_data` data frame which holds our survey responses and visualize it as a table of all unique responses. For example, the third row and second column will be the number of customers that responded `3` to question 1 and `2` to question 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(discrete_data[,1], discrete_data[,2]) %>%\n  kbl(row.names=1) %>%\n  kable_styling() %>%\n  column_spec(column = 1, bold=T)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> 1 </th>\n   <th style=\"text-align:right;\"> 2 </th>\n   <th style=\"text-align:right;\"> 3 </th>\n   <th style=\"text-align:right;\"> 4 </th>\n   <th style=\"text-align:right;\"> 5 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 2 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n   <td style=\"text-align:right;\"> 102 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 3 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 108 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 4 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 96 </td>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 5 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 29 </td>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nFrom the table above, we can already see that there is a high degree of positive correlation between the questions. If we wanted to quantifying this correlation, we might naively use the `cor` function, but this produces biased results as our provided data is not continuous, which is assumed by the default Pearson correlation measure. There are other measures of correlation such as Spearman or Kendall which are non-parametric, but neither take into account the data generating process that aligns with our philosophy. For that, we will need to employ the polychoric correlation which we will further define below.\n\n\n## Data Generating Process\nWe assumed that our data was generated by customers that were forced to discretize their agreement with a given question. If we wanted to properly model this, we might want to assume that our data is first generated from some latent multivariate continuous distribution, and then discretized using a set of `p - 1` \"cut-points\" for each dimension of the latent space, where `p` is the number of possible choices in the questionnaire. The code to generate data from this process is shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma <- c(1,0.5,0.5,1) %>% matrix(.,nrow=2,byrow=T)\ndat <- mvtnorm::rmvnorm(500, sigma=sigma)\n\nc_points <- list(\n  c(-2.69, -0.68, 0.07, 1.13),\n  c(-1.29, 0.62, 1.38, 1.65)\n)\n\ndiscrete_data <- dat %>% apply(., 1, \n                               \\(x) c(\n                                 sum(x[1] > c_points[[1]]) + 1,\n                                 sum(x[2] > c_points[[2]]) + 1)\n                               ) %>% t()\n```\n:::\n\n\n\nWe use a bivariate gaussian as our latent distribution with a mean of 0 and variance, or equivalently in this case, a correlation matrix of \n\n$$\n\\begin{bmatrix}\n1 & 0.5\\\\\n0.5 & 1\n\\end{bmatrix}\n$$\nIf we plot the latent variables with the cut-points we obtain:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(dat,pch=16, xlab = 'Question 1', ylab='Question 2', main='Latent Space Representation')\nfor (i in 1:length(c_points[[1]])){\n  abline(v=c_points[[1]][i], lwd=2, col='darkred')\n  abline(h=c_points[[2]][i], lwd=2, col='darkblue')\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nSo a customer that answered `3` for the first question and `2` for the second question would have had their latent representation in the below region: \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nplot(dat, pch=16, xlab = 'Question 1', ylab='Question 2', main='Latent Space Representation')\npolygon(x=c(c_points[[1]][2], c_points[[1]][3], c_points[[1]][3], c_points[[1]][2]),\n        y=c(c_points[[2]][1], c_points[[2]][1], c_points[[2]][2], c_points[[2]][2]),\n        col=adjustcolor('purple', 0.5))\nfor (i in 1:length(c_points[[1]])){\n  abline(v=c_points[[1]][i], lwd=2, col='darkred')\n  abline(h=c_points[[2]][i], lwd=2, col='darkblue')\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n## Modeling\n### Priors and Likelihood\nOur model is almost fully specified with the data generating process outlined above, but we still need to incorporate our priors. For the correlation matrix, we will reparametrize using the Cholesky decomposition and use a LKJ prior. The cut-points are a little trickier, but notice that the marginals of our latent distribution are standard normals. We can use this to our advantage by reparametrizing the cut-points as a vector of probabilities where each entry is the probability allocated to the interval on the standard normal distribution between two adjacent cut-points $c_i$ and $c_j$. Note that for $p-1$ cutpoints, there will be $p$ entries in our probability vector. Thus, we can write:\n\n$$\n\\begin{align}\n\\begin{bmatrix}\nc_1\\\\\nc_2 \\\\\n\\vdots\\\\\nc_{p-1}\n\\end{bmatrix}\n& \\rightarrow \\begin{bmatrix}\n\\theta_1\\\\\n\\theta_2\\\\\n\\vdots\\\\\n\\theta_{p}\n\\end{bmatrix} \\\\ \\\\\n&= \\begin{bmatrix}\n\\Phi(c_1) \\\\\n\\Phi(c_2) - \\Phi(c_1) ] \\\\\n\\vdots \\\\\n1 - \\Phi(c_{p-1})\n\\end{bmatrix}\n\\end{align}\n$$\nSince our probability interval vector must sum to one, we can use a dirichlet distribution as the prior. The stan code to specify this prior and perform the reparametrization is below:\n\n```stan\nreal induced_dirichlet_lpdf(vector c, vector alpha, real gamma){\n    int K = num_elements(c) + 1;\n    vector[K - 1] cuml = Phi(c - gamma);\n    vector[K] p;\n    matrix[K,K] J = rep_matrix(0,K,K);\n\n    p[1] = cuml[1];\n    for (k in 2:(K-1)){\n        p[k] = cuml[k] - cuml[k-1];\n    }\n    p[K] = 1 - cuml[K-1];\n\n    for (k in 1:K) J[k,1] = 1;\n\n    for (k in 2:K){\n        real rho = exp(std_normal_lpdf(c[k-1] - gamma));\n        J[k,k] = -rho;\n        J[k - 1, k] = rho;\n    }\n    return dirichlet_lpdf(p | alpha) + log_determinant(J);\n}\n```\n\nThe stan code is a bit more involved, and includes the Jacobian calculations since we are specifying a prior on the transformed parameters. For more detail about the reparametrization and Jacobian calculations I suggest reading [Michael Betancourt's ordinal regression tutorial](https://betanalpha.github.io/assets/case_studies/ordinal_regression.html). Be aware that his model uses a latent logistic distribution (different than our standard normal).\n\nFinally, we need to consider the likelihood of the data, conditioned on our parameters. To model this, we will extend the multivariate probit model to the case where an arbitrary number of ordinal categories are observed. Without going into too much detail, the multivariate probit is used to model a bernoulli distributed random vector, where the data is assumed to have been generated from a latent multivariate normal distribution. For example, if you consider our data generating process above but instead only have one cut-point per dimension, then the data generated would be a bernoulli random vector. The stan code used to define this extenstion of the multivariate probit likelihood is [here](https://github.com/TheNudibranch/TheNudibranch.github.io/blob/main/blog/pages/polychoric/model.stan), along with the full stan code for the model.\n\nThe full derivation for the likelihood, and therefore stan code, is beyond the scope of this blog post, but I refer you to these two other resources to learn more if you are interested:\n\n- [Ben Goodrich's Truncated Normal Sampler in STAN](https://groups.google.com/g/stan-users/c/GuWUJogum1o/m/LvxjlUBnBwAJ)\n- [GHK Algorithm](https://en.wikipedia.org/wiki/GHK_algorithm), which is what Ben's implementation is based on\n\nThe parameter, model, and generated quantities block is shown below:\n```stan\nparameters {\n  cholesky_factor_corr[D] L_Omega;\n  array[N,D] real<lower=0, upper=1> u;\n  array[D] ordered[n_cut] c_points;\n}\nmodel {\n    L_Omega ~ lkj_corr_cholesky(4);\n    for (d in 1:D) target += induced_dirichlet_lpdf(c_points[d] | rep_vector(1, n_cut + 1), 0);\n\n    for (n in 1:N) target += trunc_norm(y[n], c_points, L_Omega, u[n], D, y_min, y_max);\n}\ngenerated quantities {\n   corr_matrix[D] Omega;\n   Omega = multiply_lower_tri_self_transpose(L_Omega);\n}\n```\nThe parameters of interest here are `L_Omega`, which will give us the correlation matrix for our latent gaussian and the `c_points` array which determines the cut-points that generated our data. Ignore the `u` parameter, as it is a nuisance parameter and is only used to help define the likelihood of our data.\n\n\n### Sampling and Posterior Exploration\nNow that are model is fully defined, we can used the `cmdstanr` package to sample our posterior. The full stan code can found [here](https://github.com/TheNudibranch/TheNudibranch.github.io/blob/main/blog/pages/polychoric/model.stan). Note, during model fitting we are expecting some rejected samples due to the highly constrained values of the correlation matrix. When fitting this model with a higher dimension latent \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fp <- file.path('PATH TO YOUR STAN MODEL CODE')\nmod <- cmdstan_model(fp)\ndata <- list(\n  D = ncol(discrete_data),\n  N = nrow(discrete_data),\n  y = discrete_data,\n  y_min = min(discrete_data),\n  y_max = max(discrete_data)\n)\n\npoly_cor <- mod$sample(data = data, seed = 1234, chains = 4, parallel_chains = 2,\n                       iter_warmup = 2000,iter_sampling = 2000)\n```\n:::\n\n\n\n\n\n\nLet's take a look out some diagnotics to make sure we had adequate posterior sampling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoly_cor$summary(c(paste0('c_points[1,', 1:4,']'), paste0('c_points[2,', 1:4,']'), 'Omega[2,1]')) %>%\n  select(-c(median, q5, q95, mad)) %>%\n  map(., \\(x) if(is.character(x)) x else round(x,2)) %>% as.data.frame() %>%\n  kbl() %>% kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> sd </th>\n   <th style=\"text-align:right;\"> rhat </th>\n   <th style=\"text-align:right;\"> ess_bulk </th>\n   <th style=\"text-align:right;\"> ess_tail </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[1,1] </td>\n   <td style=\"text-align:right;\"> -2.44 </td>\n   <td style=\"text-align:right;\"> 0.19 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 9841.39 </td>\n   <td style=\"text-align:right;\"> 5775.21 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[1,2] </td>\n   <td style=\"text-align:right;\"> -0.70 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 9717.82 </td>\n   <td style=\"text-align:right;\"> 7102.99 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[1,3] </td>\n   <td style=\"text-align:right;\"> -0.02 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 9485.35 </td>\n   <td style=\"text-align:right;\"> 7512.77 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[1,4] </td>\n   <td style=\"text-align:right;\"> 1.04 </td>\n   <td style=\"text-align:right;\"> 0.07 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 11822.11 </td>\n   <td style=\"text-align:right;\"> 6832.92 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[2,1] </td>\n   <td style=\"text-align:right;\"> -1.36 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 12008.87 </td>\n   <td style=\"text-align:right;\"> 6858.70 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[2,2] </td>\n   <td style=\"text-align:right;\"> 0.66 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 9789.17 </td>\n   <td style=\"text-align:right;\"> 6537.07 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[2,3] </td>\n   <td style=\"text-align:right;\"> 1.44 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 10790.98 </td>\n   <td style=\"text-align:right;\"> 6061.38 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c_points[2,4] </td>\n   <td style=\"text-align:right;\"> 1.71 </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 12190.28 </td>\n   <td style=\"text-align:right;\"> 6611.51 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Omega[2,1] </td>\n   <td style=\"text-align:right;\"> 0.51 </td>\n   <td style=\"text-align:right;\"> 0.04 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 10775.66 </td>\n   <td style=\"text-align:right;\"> 6575.90 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nOur `Rhat`, `ess_bulk`, and `ess_tail` look good! Let's take a look at our posteriors for the `c_points` parameter. The ggplot code that adds line segments to the ridge plot is adapted from this [stackoverflow post](https://stackoverflow.com/questions/52527229/draw-line-on-geom-density-ridges). \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Function to extract Cut Points from stan model\nget_cut_point <- function(dim, n){\n  c_name <- paste0('c_points[', dim, ',', n, ']')\n  poly_cor$draws(c_name) %>% \n    .[,,1,drop=T] %>%\n    as.vector() %>% as.data.frame() %>%\n    cbind(., c_name, dim)\n}\n\ncut_point_draws <- lapply(4:1, \\(x) get_cut_point(1,x)) %>% \n  append(., lapply(4:1, \\(x) get_cut_point(2,x))) %>%\n  do.call('rbind', .) %>% set_names(c('value', 'name', 'dim')) %>% \n  mutate(dim=as.factor(dim))\n\n# Plot the Cut Point Ridge plot\ncomp <- ggplot(cut_point_draws, aes(x=value, y=name)) + geom_density_ridges()\ningredients <- ggplot_build(comp) %>% purrr::pluck(\"data\", 1)\n\ndensity_lines <- ingredients %>% group_by(group) %>% \n  mutate(a = c_points[[floor(max(group)/5) + 1]][[((max(group) - 1) %% 4) + 1]]) %>% \n  slice(which.min(abs(x-a)))\n\nggplot(cut_point_draws, aes(x=value, y=name)) + \n  geom_density_ridges(aes(fill=dim), rel_min_height = 0.01, lwd=1.2, alpha=0.3) +\n  scale_x_continuous(breaks = seq(-3.5,2.5,0.5),limits = c(-3.5,2), expand=c(0,0)) +\n  geom_segment(data = density_lines, col='darkred',lwd=1.2,\n               aes(x = x, y = ymin, xend = x, \n                   yend = ymin+density*scale*iscale, linetype='Actual Cut-Point Value')) +\n  scale_linetype_manual(\"\",values=c('Actual Cut-Point Value'=1)) +\n  scale_fill_manual(\"Cut-point Dimension\", \n                    values=c('darkblue', 'darkred', 'yellow'), \n                    labels=c('Dim. 1', 'Dim. 2')) +\n  labs(title='Cut Point Parameter Estimates') +\n  theme_ridges() + \n  theme(axis.title.y = element_blank(), axis.title.x = element_blank(), \n        axis.text = element_text(size=20), plot.title = element_text(size=30),\n        legend.text = element_text(size=20), legend.title = element_text(size=30))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=1440}\n:::\n:::\n\n\n\nIt looks like the actual value of each cut-point is captured within the range of each estimated parameter. Now we can look at our originally requested quantity; the correlation.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoly_cor$draws('Omega[2,1]') %>% .[,,1,drop=T] %>% as.vector() %>% \n  {as.data.frame(list(x=.))} %>%\n  ggplot(aes(x=x)) + geom_histogram(aes(y=..density..), fill='darkblue', col='black', alpha=0.3) + \n  geom_density(lwd=1.3) +     \n  geom_vline(aes(xintercept=0.5, color='Actual Value'), size=1.5, linetype='twodash') +\n  scale_colour_manual(\"\", values=\"darkred\") +\n  labs(title='Correlation Parameter Estimate') +\n  theme_minimal() +\n  theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.text = element_text(size=13),\n        axis.text = element_text(size=13), plot.title = element_text(size=17))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n## Conclusion\nIt looks like our model fits the data well and is able to adequately identify the parameters. While the polychoric correlation is a little more involved than a simple pearson correlation, it aligns more with our original data generating process philosophy. Since this model was fit using a bayesian framework we have samples from our posterior which we can use to perform decision analysis, generating pseudocustomers, or probabilistic PCA from the posterior of the correlation matrix. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.2 (2024-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggridges_0.5.6   kableExtra_1.4.0 knitr_1.49       cmdstanr_0.8.1  \n [5] lubridate_1.9.3  forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4     \n [9] purrr_1.0.2      readr_2.1.5      tidyr_1.3.1      tibble_3.2.1    \n[13] ggplot2_3.5.1    tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] tensorA_0.36.2.1     utf8_1.2.4           generics_0.1.3      \n [4] xml2_1.3.6           stringi_1.8.4        hms_1.1.3           \n [7] digest_0.6.37        magrittr_2.0.3       evaluate_1.0.1      \n[10] grid_4.4.2           timechange_0.3.0     mvtnorm_1.3-2       \n[13] fastmap_1.2.0        jsonlite_1.8.9       processx_3.8.4      \n[16] backports_1.5.0      ps_1.8.1             fansi_1.0.6         \n[19] viridisLite_0.4.2    scales_1.3.0         abind_1.4-8         \n[22] cli_3.6.3            rlang_1.1.4          munsell_0.5.1       \n[25] withr_3.0.2          yaml_2.3.10          tools_4.4.2         \n[28] tzdb_0.4.0           checkmate_2.3.2      colorspace_2.1-1    \n[31] vctrs_0.6.5          posterior_1.6.0      R6_2.5.1            \n[34] matrixStats_1.4.1    lifecycle_1.0.4      htmlwidgets_1.6.4   \n[37] pkgconfig_2.0.3      pillar_1.9.0         gtable_0.3.6        \n[40] glue_1.8.0           systemfonts_1.1.0    xfun_0.49           \n[43] tidyselect_1.2.1     rstudioapi_0.17.1    farver_2.1.2        \n[46] htmltools_0.5.8.1    labeling_0.4.3       svglite_2.1.3       \n[49] rmarkdown_2.29       compiler_4.4.2       distributional_0.5.0\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}