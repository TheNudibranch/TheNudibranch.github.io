return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 0
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 1
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 0.4
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*x.oxy +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1) +
dnorm(params[['b.int.cand']], 0, 10)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
# b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 4e5
chain <- matrix(NA, nrow=N, ncol=3)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
# b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
# b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 4e5
chain <- matrix(NA, nrow=N, ncol=2)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
# b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
# hist(chain[-seq(1,3e4),3])
plot(density(chain[-seq(1,7e4),1]))
# hist(chain[-seq(1,3e4),3])
plot(density(chain[-seq(1,7e4),2]))
fit <- glm(y ~ x.oxy, family=poisson())
summary(fit)
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 400 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 0.4
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
fit <- glm(y ~ x.oxy, family=poisson())
summary(fit)
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 0.4
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy))
lines(exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy))
p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(exp(p_seq*0.84376 - 3.63655))
seq(min(x.oxy), max(x.oxy))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
# p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(p_seq, exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(seq(min(x.oxy), max(x.oxy), length.out = 1e3), exp(p_seq*0.84376 - 3.63655))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
p_seq <- seq(min(x.oxy), max(x.oxy), length.out = 1e3)
# p_seq <- (p_seq - mean(x.oxy)) / (sd(x.oxy))
lines(seq(min(x.oxy), max(x.oxy), length.out = 1e3), exp(p_seq*0.84376 - 3.63655))
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*standardize(x.oxy) +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1) +
dnorm(params[['b.int.cand']], 0, 10)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
# b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 4e5
chain <- matrix(NA, nrow=N, ncol=2)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
# b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
# b.depth <- -0.6
b.int <- 0.4
# lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
lambda <- exp(b.oxy*standardize(x.oxy) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,1))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
# plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
fit <- glm(y ~ standardize(x.oxy), family=poisson())
summary(fit)
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
b.depth <- -0.6
b.int <- 0.4
lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,2))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
fit <- glm(y ~ standardize(x.oxy) + standardize(x.depth), family=poisson())
summary(fit)
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*standardize(x.oxy) +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1) +
dnorm(params[['b.int.cand']], 0, 10)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*standardize(x.oxy) +
params[['b.depth.cand']]*standardize(x.depth) +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1) +
dnorm(params[['b.int.cand']], 0, 10)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 4e5
chain <- matrix(NA, nrow=N, ncol=2)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 4e5
chain <- matrix(NA, nrow=N, ncol=3)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
N <- 1e4
chain <- matrix(NA, nrow=N, ncol=3)
for (i in 1:N){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], 0.1),
b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], 0.1),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], 0.1)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
# hist(chain[-seq(1,3e4),3])
plot(density(chain[-seq(1,500),2]))
# hist(chain[-seq(1,3e4),3])
plot(density(chain[-seq(1,500),1]))
# hist(chain[-seq(1,3e4),3])
plot(density(chain[-seq(1,500),3]))
burn <- 1e3
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 3, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
burn <- 1e3
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 3, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior.oxy, col=adjustcolor('darkgreen', 0.5))
burn <- 1e3
par(mfrow=c(1,3))
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 3, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior.oxy, col=adjustcolor('darkgreen', 0.5))
posterior.depth <- density(chain[-seq(1,burn), 3])
plot(posterior.depth, lwd = 3, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior.depth, col=adjustcolor('darkblue', 0.5))
posterior.int <- density(chain[-seq(1,burn), 1])
plot(posterior.int, lwd = 3, xlab='', ylab='', main='Posterior for Beta_0')
polygon(posterior.int, col=adjustcolor('darkred', 0.5))
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 500 # Number of ponds fished at
x_oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x_depth <- abs(rnorm(N, 30, 10)) # Pond depth
b_oxy <- 0.8
b_depth <- -0.6
b_int <- 0.4
lambda <- exp(b_oxy*standardize(x_oxy) + b_depth*standardize(x_depth) + b_int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,2))
plot(x_oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
plot(x_depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
fit <- glm(y ~ standardize(x_oxy) + standardize(x_depth), family=poisson())
summary(fit)
log_poi_liklihood <- function(params){
lam_cands <- exp(params[['b_oxy_cand']]*standardize(x_oxy) +
params[['b_depth_cand']]*standardize(x_depth) +
params[['b_int_cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log_prior <- function(params){
return(
dnorm(params[['b_oxy_cand']], 0.5, 1, log=T) +
dnorm(params[['b_depth_cand']], -0.5, 1, log=T) +
dnorm(params[['b_int_cand']], 0, 10, log=T)
)
}
log_posterior_prob <- function(params){
return(log_prior(params) + log_poi_liklihood(params))
}
mcmc_chain <- function(N_sim, explore_param){
curr_params <-  list(
b_oxy_cand = rnorm(1, 0, 4),
b_depth_cand = rnorm(1, 0, 4),
b_int_cand = rnorm(1, 0, 4)
)
chain <- matrix(NA, nrow=N_sim, ncol=3)
for (i in 1:N_sim){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N_sim)))
}
cand_params <- list(
b_oxy_cand = rnorm(1, curr_params[['b_oxy_cand']], explore_param),
b_depth_cand = rnorm(1, curr_params[['b_depth_cand']], explore_param),
b_int_cand = rnorm(1, curr_params[['b_int_cand']], explore_param)
)
a <- min(1, exp(log_posterior_prob(cand_params) -
log_posterior_prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
return(chain)
}
N_sim <- 1e4
N_chains <- 4
posterior_samples <- array(NA, c(N_sim, 3, N_chains))
chain <- mcmc_chain(N_sim, explore_param = 0.01)
simulation <- list()
for (i in 1:N_chains){
simulation[[paste0('chain_',i)]] <- mcmc_chain(N_sim, explore_param = 0.01)
}
names(simulation)
burn <- 2e4
par(mfrow=c(1,2))
posterior_oxy <- density(chain[-seq(1,burn), 1])
chains
chain
burn <- 2e3
par(mfrow=c(1,2))
posterior_oxy <- density(chain[-seq(1,burn), 1])
plot(posterior_oxy, lwd = 4, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior_oxy, col=adjustcolor('darkgreen', 0.5))
abline(v=0.8, col='red', lwd=4)
posterior_depth <- density(chain[-seq(1,burn), 2])
plot(posterior_depth, lwd = 4, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior_depth, col=adjustcolor('darkblue', 0.5))
abline(v=-0.6, col='red', lwd=4)
# posterior.int <- density(chain[-seq(1,burn), 3])
# plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
# polygon(posterior.int, col=adjustcolor('darkred', 0.5))
# abline(v=0.4, col='red', lwd=4)
burn <- 2e3
par(mfrow=c(1,2))
posterior_oxy <- density(chain[-seq(1,burn), 1])
plot(posterior_oxy, lwd = 4, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior_oxy, col=adjustcolor('darkgreen', 0.5))
abline(v=0.8, col='red', lwd=4)
posterior_depth <- density(chain[-seq(1,burn), 2])
plot(posterior_depth, lwd = 4, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior_depth, col=adjustcolor('darkblue', 0.5))
abline(v=-0.6, col='red', lwd=4)
# posterior_int <- density(chain[-seq(1,burn), 3])
# plot(posterior_int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
# polygon(posterior_int, col=adjustcolor('darkred', 0.5))
# abline(v=0.4, col='red', lwd=4)
par(mfrow=c(1,1))
posterior_int <- density(chain[-seq(1,burn), 3])
plot(posterior_int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
polygon(posterior_int, col=adjustcolor('darkred', 0.5))
abline(v=0.4, col='red', lwd=4)
